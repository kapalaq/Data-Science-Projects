p + geom_histogram(binwidth=10000000, fill="blue") +
p + geom_histogram(binwidth=1000000, fill="blue") +
p + geom_histogram(binwidth=100000, fill="blue") +
p + geom_histogram(binwidth=100, fill="blue") +
p + geom_histogram(binwidth=100, fill="blue")
p + geom_histogram(binwidth=100, fill="blue")
p + geom_histogram(binwidth=1000, fill="blue")
p + geom_histogram(binwidth=1, fill="blue")
p <- murders |> mutate(rate=total/population*10^6) |> ggplot(aes(x=rate))
p + geom_histogram(binwidth=1, fill="blue")
p + geom_histogram(binwidth=4, fill="blue")
p + geom_histogram(binwidth=4, fill="blue", col="black")
p + geom_histogram(aes(label=abb), binwidth=4, fill="blue", col="black")
p + geom_histogram(aes(group=region), binwidth=4, fill="blue", col="black")
p + geom_histogram(aes(group=region, col=region), binwidth=4, fill="blue", col="black")
p + geom_histogram(aes(group=region, label=abb), binwidth=4, fill="blue", col="black")
p + geom_histogram(aes(group=region, label=region), binwidth=4, fill="blue", col="black")
p + geom_point(aes(group=region)) +
geom_label(aes(label=abb))
p + geom_point(aes(group=region)) +
geom_label(label="A")
p <- murders |> ggplot(aes(x=population, y=total))
p + geom_point(aes(group=region)) +
geom_label(label="A")
p + geom_point(aes(group=region)) +
geom_label(label="A", color="blue")
rm(list=ls())
library(dslabs)
data(gapminder)
gapminder
str(gapminder)
as_tibble(gapminder)
gapminder |> filter(year == 2015 & country %in% c("Turkey", "Sri Lanka")) |>
select(country, infant_mortality)
with(gapminder, levels(country))
gapminder |> filter(country == "Kazakhstan") |>
select(country, infant_mortality)
gapminder |> filter(country == "Kazakhstan") |>
select(year, infant_mortality)
gapminder |> filter(country == "Namibia") |>
select(year, infant_mortality)
gapminder |> filter(country == "Ukraine") |>
select(year, infant_mortality)
as_tibble(gapminder)
gapminder |> filter(country == "Kazakhstan") |>
select(year, infant_mortality, population)
gapminder |> filter(country == "Kazakhstan") |>
select(year, infant_mortality, life_expectancy)
gapminder |> filter(country == "Kazakhstan") |>
select(year, infant_mortality, gdp)
gapminder |> filter(infant_mortality < 10) |>
select(year, infant_mortality)
gapminder |> filter(infant_mortality < 10) |>
select(country, infant_mortality)
gapminder |> filter(infant_mortality < 10) |> group_by(country) |>
select(country, infant_mortality)
gapminder |> filter(infant_mortality < 10) |> group_by(country) |>
summarize(average_i_m=mean(infant_mortality)) |>
select(country, infant_mortality)
gapminder |> filter(infant_mortality < 10) |> group_by(country) |>
summarize(average_i_m=mean(infant_mortality))
gapminder |> filter(infant_mortality < 10) |> group_by(country) |>
summarize(average_i_m=mean(infant_mortality)) |> as_data_frame()
gapminder |> filter(infant_mortality < 10) |> group_by(country) |>
summarize(average_i_m=mean(infant_mortality)) |> as.data.frame()
ds_theme_set()
p + geom_point()
p <- gapminder |> ggplot(aes(x=fertility, y=life_expectancy))
p + geom_point()
p + geom_point(na.rm=TRUE)
p <- gapminder |> filter(year == 2008) |>
ggplot(aes(x=fertility, y=life_expectancy))
p + geom_point(na.rm=TRUE)
p <- gapminder |>
ggplot(aes(x=fertility, y=life_expectancy, group=year))
p + geom_point(na.rm=TRUE)
p <- gapminder |> filter(year == 2008)
p <- gapminder |> filter(year == 2008) |>
ggplot(aes(x=fertility, y=life_expectancy))
p + geom_point(na.rm=TRUE)
r <- gapminder |> summarize(average=sum(life_expectancy)/sum(fertility)) |> pull(average)
r <- gapminder |> summarize(average=sum(life_expectancy)/sum(fertility)) |> pull(average)
r <- gapminder |> summarize(average=sum(life_expectancy)/sum(fertility)) |> pull(average)
source("G:/RStudio/Scripts/test.R")
r <- gapminder |> summarize(average=sum(life_expectancy, na.rm=TRUE)/sum(fertility, na.rm=TRUE)) |> pull(average)
p <- gapminder |> filter(year == 2008) |>
ggplot(aes(x=fertility, y=life_expectancy))
p + geom_point(na.rm=TRUE)
p + geom_point(na.rm=TRUE) + geom_abline(slope=r)
p + geom_point(na.rm=TRUE) + geom_abline(intercept=r)
p + geom_point(na.rm=TRUE) + geom_abline(slope=-r)
p + geom_point(na.rm=TRUE) + geom_abline(slope=(-r))
p + geom_point(na.rm=TRUE) + geom_abline(slope=r)
p + geom_point(na.rm=TRUE) + geom_abline(slope=-r)
p + geom_point(na.rm=TRUE) + geom_abline(slope=r)
r <- -gapminder |> summarize(average=sum(life_expectancy, na.rm=TRUE)/sum(fertility, na.rm=TRUE)) |> pull(average)
r <- -r
p <- gapminder |> filter(year == 2008) |>
ggplot(aes(x=fertility, y=life_expectancy))
p + geom_point(na.rm=TRUE) + geom_abline(slope=r)
r <- gapminder |> summarize(average=sum(life_expectancy, na.rm=TRUE)/sum(fertility, na.rm=TRUE)) |> pull(average)
p <- gapminder |> filter(year == 2008) |>
ggplot(aes(x=fertility, y=life_expectancy))
p + geom_point(na.rm=TRUE) + geom_abline(slope=r)
r <- gapminder |> summarize(average=mean(life_expectancy, na.rm=TRUE)/mean(fertility, na.rm=TRUE)) |> pull(average)
p <- gapminder |> filter(year == 2008) |>
ggplot(aes(x=fertility, y=life_expectancy))
p + geom_point(na.rm=TRUE) + geom_abline(slope=r)
p <- gapminder |> filter(year == 2008) |>
ggplot(aes(x=fertility, y=life_expectancy, color=continent))
p + geom_point(na.rm=TRUE) + geom_abline(slope=r)
p + geom_point(na.rm=TRUE)
library(dplyr)
library(ggplot2)
library(dslabs)
data(us_contagious_diseases)
dat <- us_contagious_diseases %>% filter(year == 1967 & disease=="Measles" & count>0 & !is.na(population)) %>%
mutate(rate = count / population * 10000 * 52 / weeks_reporting)
dat <- arrange(dat, rate)
dat %>% ggplot(aes(state, rate)) +
geom_bar(stat="identity") +
coord_flip()
dat <- mutate(rate = sort(rate))
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
dat <- arrange(dat, rate)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
library(gtools)
install.packages(gtools)
install.packages("gtools")
library(gtools)
all_phone_numbers <- permutations(10, 7, v=0:9)
all_phone_numbers
n <- nrow(all_phone_numbers)
str(all_phone_numbers)
sample(1, 5)
sample(6, 5)
index <- sample(n, 5)
index
all_phone_numbers[index, ]
prize <- sample(c("car", "goat", "goat"))
prize
duplicated(c(1,2,3,1,4,3,5))
duplicated(c(1,2,3,1,4,3,5,1,2,3,1,4,3,5))
B <- 10^seq(1, 5, len = 100)
B
compute_prob <- function(B, n=25){
same_day <- replicate(B, same_birthday(n))
mean(same_day)
}
prob <- sapply(B, compute_prob)
same_birthday <- function(n){
bdays <- sample(1:365, n, replace=TRUE)
any(duplicated(bdays))
}
compute_prob <- function(B, n=25){
same_day <- replicate(B, same_birthday(n))
mean(same_day)
}
prob <- sapply(B, compute_prob)
qplot(log10(B), prob, geom = "line")
library(ggplot2)
qplot(log10(B), prob, geom = "line")
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
df |> ggplot() +
geom_line(aes(x=height, y=..density.., color="orange")) +
geom_line(aes(x=simulated_height, color="green")) +
xlab("Distribution") +
ylab("Density") +
ggtitle("Heights")
df |> ggplot() +
geom_line(aes(x=height, stat="density", color="orange")) +
geom_line(aes(x=simulated_height, color="green")) +
xlab("Distribution") +
ylab("Density") +
ggtitle("Heights")
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
df |> ggplot() +
geom_line(aes(x=height, y=dnorm(height, mu, sigma), color="orange")) +
geom_line(aes(x=simulated_height, y=dnorm(simulated_height, mu, sigma), color="green")) +
xlab("Distribution") +
ylab("Density") +
ggtitle("Heights") +
geom_vline(xintercept=mu - sigma)
df |> ggplot() +
geom_line(aes(x=height, y=dnorm(height, mu, sigma), color="orange")) +
geom_line(aes(x=simulated_height, y=dnorm(simulated_height, mu, sigma), color="green")) +
xlab("Distribution") +
ylab("Density") +
ggtitle("Heights") +
geom_vline(aes(lty=2), xintercept=mu - sigma)
source("G:/RStudio/Scripts/test.R")
df |> ggplot() +
geom_line(aes(x=height, y=dnorm(height, mu, sigma), color="orange")) +
geom_line(aes(x=simulated_height, y=dnorm(simulated_height, mu, sigma), color="green")) +
xlab("Distribution") +
ylab("Density") +
ggtitle("Heights") +
geom_vline(aes(lty=2, xintercept=mu - sigma))
source("G:/RStudio/Scripts/test.R")
df |> ggplot() +
geom_line(aes(x=height, y=dnorm(height, mu, sigma), color="orange")) +
geom_line(aes(x=simulated_height, y=dnorm(simulated_height, mu, sigma), color="green")) +
xlab("Distribution") +
ylab("Density") +
ggtitle("Heights") +
geom_vline(aes(lty=2), xintercept=mu - sigma)
df |> ggplot() +
geom_line(aes(x=height, y=dnorm(height, mu, sigma), color="orange")) +
geom_line(aes(x=simulated_height, y=dnorm(simulated_height, mu, sigma), color="green")) +
xlab("Distribution") +
ylab("Density") +
ggtitle("Heights") +
geom_vline(xintercept=mu - sigma, lty=2)
source("G:/RStudio/Scripts/test.R")
df |> ggplot() +
geom_line(aes(x=height, y=dnorm(height, mu, sigma), color="orange")) +
geom_line(aes(x=simulated_height, y=dnorm(simulated_height, mu, sigma), color="green")) +
xlab("Distribution") +
ylab("Density") +
ggtitle("Heights") +
geom_vline(xintercept=mu - sigma, lty=2) +
geom_vline(xintercept=mu + sigma, lty=2) +
geom_vline(xintercept=mu - 2*sigma, lty=2) +
geom_vline(xintercept=mu + 2*sigma, lty=2) +
geom_vline(xintercept=mu - 3*sigma, lty=2) +
geom_vline(xintercept=mu - 3*sigma, lty=2)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
?scale_fill_manual
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R")
source("G:/RStudio/Scripts/test.R", echo=TRUE)
?qnorm
data(us_contagious_diseases)
library(us_contagious_diseases)
source("G:/RStudio/Scripts/test.R")
rm(list=ls())
source("G:/RStudio/Scripts/test.R")
edit.file("G:\Data Science\Kazakhstan COVID-19\kazakhstan_covid_19.r")
edit.file("G:/Data Science/Kazakhstan COVID-19/kazakhstan_covid_19.r")
file.edit("G:/Data Science/Kazakhstan COVID-19/kazakhstan_covid_19.r")
#importing required libraries
library(ggplot2)
library(ggthemes)
library(dplyr)
library(tidyverse)
#importing data set
filename <- "Kazakhstan_COVID_19.csv"
dir <- system.file("extdata", package="dslabs")
fullpath <- file.path(dir, filename)
file.copy(fullpath, filename)
library(tidyverse)
library(dslabs)
dat <- read_csv(filename)
#importing data set
filename <- "Kazakhstan_COVID_19.csv"
dir <- system.file("extdata", package="dslabs")
fullpath <- file.path(dir, filename)
file.create(fullpath, filename)
dat <- read_csv(filename)
View(dat)
file.copy(fullpath, filename)
file.create(fullpath, "G:\Data Science\Kazakhstan COVID-19" + filename)
file.create(fullpath, "G:/Data Science/Kazakhstan COVID-19" + filename)
file.copy(fullpath, "G:/Data Science/Kazakhstan COVID-19/Kazakhstan_COVID_19.csv")
dat <- read_csv(filename)
file.copy(fullpath, "G:/Data Science/Kazakhstan COVID-19/Kazakhstan_COVID_19.csv")
file.copy(fullpath, "G:/Data Science/Kazakhstan COVID-19/Kazakhstan_COVID_19.csv")
file.copy(fullpath, "G:/Data Science/Kazakhstan COVID-19/Kazakhstan_COVID_19.csv")
file.copy(filename, "G:/Data Science/Kazakhstan COVID-19/Kazakhstan_COVID_19.csv")
fullpath
#importing data set
filename <- "Kazakhstan_COVID_19.csv"
dir <- system.file("extdata", package="dslabs")
file.copy(dir, "G:/Data Science/Kazakhstan COVID-19/Kazakhstan_COVID_19.csv")
file.copy("G:/Data Science/Kazakhstan COVID-19/Kazakhstan_COVID_19.csv", dir)
#getting data
dat <- read_csv(filename)
#getting data
dat <- read_csv(filename)
#getting data
dat <- read.csv(filename)
#getting data
dat <- read.csv(file=filename)
#getting data
dat <- read.csv(file = file(open = file.path(dir, filename)))
library(dslabs)
#getting data
dat <- data(filename)
#getting data
dat <- data("Kazakhstan_COVID_19")
#getting data
dat <- data("Kazakhstan_COVID_19.csv")
#getting data
dat <- read_csv(filename)
#getting data
dat <- read_csv(file(open=filename))
library(readr)
#getting data
dat <- read.csv(filename)
#getting data
dat <- read_csv(filename)
file.exists(filename)
#getting data
dat <- read_csv(file.path(dir, filename))
head(dat)
str(dat)
dat$CityName
dat$PeriodStartDate
dat$PeriodEndDate
head(as.data.frame(dat))
set.seed(21, sample.kind = "Rounding")
x <- replicate(10000, {})
x <- replicate(10000, {
sum(c(1, -0.25), 44, prob = c(1/5, 4/5), replace = TRUE)
})
mean(x >= 8)
x
x <- replicate(10000, {
sum(sample(c(1, -0.25), 44, prob = c(1/5, 4/5), replace = TRUE))
})
x
mean(x >= 8)
x[x == 44]
x == 44
any(x == 44)
any(x > 40)
any(x > 30)
any(x > 20)
any(x > 10)
any(x > 15)
any(x > 14)
any(x > 13)
any(x > 12)
x <- replicate(1000000, {
sum(sample(c(1, -0.25), 44, prob = c(1/5, 4/5), replace = TRUE))
})
any(x > 15)
any(x > 25)
any(x > 20)
any(x > 22)
any(x > 21)
any(x > 20.5)
any(x >= 20.5)
any(x >= 20.2)
any(x >= 20.3)
any(x >= 20.24)
any(x >= 20.25)
any(x >= 20.27)
any(x >= 20.26)
any(x >= 20.25)
any(x >= 20.251)
any(x >= 20.25)
rm(list=ls())
0.25 * 44
?quantile
p <- seq(0.25, 0.95, 0.05)
prob_func <- function(p) {
e <- 44 * (1 * p)
se <- 0
se <- sqrt(44) * sqrt(p * (1 - p))
1 - pnorm(35, e, se)
}
sapply(p, FUN=prob_func)
p
6 * 5/38 - 33/38
7 * sqrt(5/38 * 33/38)
7 * sqrt(5/38 * 33/38) / sqrt(500)
(6 * 5/38 - 33/38) * 500
sqrt(500) * 7 * sqrt(5/38 * 33/38)
pnorm(0, -39.47368, 52.91045)
q()
q()
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
seq(1/10, 1, 11)
seq(1/10, 1, 11)
seq(1/10, 1, length=11)
seq(1/10, 1, length=10)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
1/2 + 1/3 + 1/13 + 1/598 + 1/897
21/23
1/2 + 1/3
decompose <- function(n) {
if (n == floor(n)) return(toString(as.numeric(n)))
num <- c()
sum <- 0
i <- 1
while(TRUE) {
if (sum == n) {
return(paste(1, num, collapse=",", sep="/"))
}
if (sum + 1/i <= n) {
sum <- sum + 1/i
num <- append(num, i)
}
i <- i + 1
}
}
decompose(2/3)
decompose(21/23)
decompose(12/4)
decompose(3/4)
decompose(21/23)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
1/2 + 1/3 + 1/13 + 1/359 + 1/6644046
1/2 + 1/3 + 1/13 + 1/359 + 1/644046
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
21/23
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
gsub("1/1", "1", "1/1,1/2,1/3,1/4")
is.na("")
is.na(NA)
is.empty("")
isempty
empty
empty()
num <- c(1, 2, 3, 4)
num[2:length(num)]
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/RStudio/Scripts/test.R", echo=TRUE)
source("G:/Data Science/Titanic/titanic.r", echo=TRUE)
df[["Sex", "Age", "Fare"]]
df["Sex", "Age", "Fare"]
df["Sex"]
["Sex", "Age", "Fare"]
df[["Sex", "Age", "Fare"]]
select(df, Sex, Age, Fare)
# Check Data
str(df)
select(df, Pclass, Survived, Age, Fare)
mean(select(df, Pclass, Survived, Age, Fare))
select(df, Pclass, Survived, Age, Fare).mean()
select(df, Pclass, Survived, Age, Fare) |> summarize(mean_class = mean(Pclass))
select(df, Pclass, Survived, Age, Fare) |> summarize(mean(Pclass), mean(survived),
mean(Age), mean(Fare))
select(df, Pclass, Survived, Age, Fare) |> summarize(mean(Pclass), mean(Survived),
mean(Age), mean(Fare))
select(df, Pclass, Survived, Age, Fare) |> summarize(mean(Pclass), mean(Survived),
mean(Age, na.rm=TRUE), mean(Fare))
select(df, Pclass, Survived, Age, Fare) |> summarize(mean(Pclass, na.rm=TRUE),
mean(Survived, na.rm=TRUE),
mean(Age, na.rm=TRUE),
mean(Fare, na.rm=TRUE))
s <- select(df, Pclass, Survived, Age, Fare) |> summarize(m1=mean(Pclass, na.rm=TRUE),
m2=mean(Survived, na.rm=TRUE),
m3=mean(Age, na.rm=TRUE),
m4=mean(Fare, na.rm=TRUE))
m1 <- pull(s, m1)
m2 <- pull(s, m2)
m3 <- pull(s, m3)
m4 <- pull(s, m4)
wd <- select(df, Pclass, Survived, Age, Fare)
s <- wd |> summarize(m1=mean(Pclass, na.rm=TRUE),
m2=mean(Survived, na.rm=TRUE),
m3=mean(Age, na.rm=TRUE),
m4=mean(Fare, na.rm=TRUE))
m1 <- pull(s, m1)
m2 <- pull(s, m2)
m3 <- pull(s, m3)
m4 <- pull(s, m4)
